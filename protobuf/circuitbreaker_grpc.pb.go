// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpClient is the client API for Http service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpClient interface {
	Request(ctx context.Context, in *RequestInput, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *GetInput, opts ...grpc.CallOption) (*Response, error)
	Post(ctx context.Context, in *PostInput, opts ...grpc.CallOption) (*Response, error)
}

type httpClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpClient(cc grpc.ClientConnInterface) HttpClient {
	return &httpClient{cc}
}

func (c *httpClient) Request(ctx context.Context, in *RequestInput, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.Http/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpClient) Get(ctx context.Context, in *GetInput, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.Http/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpClient) Post(ctx context.Context, in *PostInput, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.Http/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpServer is the server API for Http service.
// All implementations must embed UnimplementedHttpServer
// for forward compatibility
type HttpServer interface {
	Request(context.Context, *RequestInput) (*Response, error)
	Get(context.Context, *GetInput) (*Response, error)
	Post(context.Context, *PostInput) (*Response, error)
	mustEmbedUnimplementedHttpServer()
}

// UnimplementedHttpServer must be embedded to have forward compatible implementations.
type UnimplementedHttpServer struct {
}

func (UnimplementedHttpServer) Request(context.Context, *RequestInput) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedHttpServer) Get(context.Context, *GetInput) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHttpServer) Post(context.Context, *PostInput) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedHttpServer) mustEmbedUnimplementedHttpServer() {}

// UnsafeHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpServer will
// result in compilation errors.
type UnsafeHttpServer interface {
	mustEmbedUnimplementedHttpServer()
}

func RegisterHttpServer(s grpc.ServiceRegistrar, srv HttpServer) {
	s.RegisterService(&Http_ServiceDesc, srv)
}

func _Http_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Http/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServer).Request(ctx, req.(*RequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Http_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Http/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServer).Get(ctx, req.(*GetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Http_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Http/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServer).Post(ctx, req.(*PostInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Http_ServiceDesc is the grpc.ServiceDesc for Http service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Http_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Http",
	HandlerType: (*HttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Http_Request_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Http_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _Http_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circuitbreaker.proto",
}
